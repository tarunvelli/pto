.row
  .row
    .col-md-9
      .col-md-6
        .alert.alert-info WFH should be applied 1 day in advance to avoid penalty of 1 WFH.
      .col-md-6.select-user
        = form_tag(admin_user_path(@user), method: :get) do |f|
          = label_tag 'select_user:'
          = select_tag 'select_user', options_for_select(@users.collect{ |u| [u.name, u.id] }, [@user.name, @user.id]), :onchange => "this.form.submit();"
      .col-md-12
        #calendar
    .col-md-3
      %h1 Apply OOO
      = render 'shared/ooo_period_form', url: admin_user_oooperiods_path(@user), method: :post
      .row
        %table#user_leaves.table.table-striped.table-bordered
          %h3 Leave Stats (#{@financial_year})
          %tbody
            %tr
              %td Total Leaves
              %td= @user.total_leaves_count(@financial_year)
            %tr
              %td Remaining Leaves
              %td= @user.remaining_leaves_count(@financial_year, nil)
            %tr
              %td Leaves used
              %td= @user.leaves_used_count(@financial_year)
      .row
        %table#user_wfhs.table.table-striped.table-bordered
          %h3 WFH Stats (Q#{@current_quarter})
          %tbody
            %tr
              %td Total WFH
              %td= @user.total_wfhs_count(@financial_year, @current_quarter)
            %tr
              %td Remaining WFH
              %td= @user.remaining_wfhs_count(@financial_year, @current_quarter, nil)
            %tr
              %td WFH used
              %td= @user.wfhs_used_count(@financial_year, @current_quarter)


  .row
    .col-md-10.col-md-offset-1
      %h1 Leave History
  %table#leave_history.table.table-striped.table-bordered
    %thead
      %tr
        %td Start Date
        %td End Date
        %td Number of Days
        %td Edit
        %td Delete
    %tbody
      - @leaves.each do |leave|
        %tr
          %td= leave.start_date
          %td= leave.end_date
          %td= OOOPeriod.business_days_count_between(leave.start_date, leave.end_date)
          %td= link_to 'Edit', edit_admin_user_oooperiod_path(leave.user, leave)
          %td
            = link_to 'Delete', admin_user_oooperiod_path(leave.user, leave), method: :delete, data: { confirm: 'Are you sure?' }

  .row
    .col-md-10.col-md-offset-1
      %h1 WFH History
  %table#wfh_history.table.table-striped.table-bordered
    %thead
      %tr
        %td Start Date
        %td End Date
        %td Number of Days
        %td Edit
        %td Delete
    %tbody
      - @wfhs.each do |wfh|
        %tr
          %td= wfh.start_date
          %td= wfh.end_date
          %td= Wfh.days_count_between(wfh.start_date, wfh.end_date, wfh.updated_at)
          %td= link_to 'Edit', edit_admin_user_oooperiod_path(wfh.user, wfh)
          %td
            = link_to 'Delete',admin_user_oooperiod_path(wfh.user, wfh), method: :delete, data: { confirm: 'Are you sure?' }


:javascript
  $(document).ready(function() {
    var leaves = #{@leaves.to_json}
    var data = [];
    for (var i=0;i<leaves.length;i++){
      var start_date = moment(leaves[i].start_date);
      var end_date = moment(leaves[i].end_date);
      var currentDate = moment(start_date);
      var stopDate = moment(end_date);
      var dateArray = new Array();
      while (currentDate <= stopDate) {
        if (currentDate.day() % 6 != 0) {
          dateArray.push( moment(currentDate) )
        }
        currentDate = moment(currentDate).add(1, 'days');
      }
      for (j = 0; j < dateArray.length; j++) {
        var obj = {
          startDate: dateArray[j],
          endDate: dateArray[j],
          color: 'red'
        }
        data.push(obj)
      }
    }
    var wfhs = #{@wfhs.to_json}
    for (var i=0;i<wfhs.length;i++){
      var start_date = moment(wfhs[i].start_date);
      var end_date = moment(wfhs[i].end_date);
      var currentDate = moment(start_date);
      var stopDate = moment(end_date);
      var dateArray = new Array();
      while (currentDate <= stopDate) {
        if (currentDate.day() % 6 != 0) {
          dateArray.push( moment(currentDate) )
        }
        currentDate = moment(currentDate).add(1, 'days');
      }
      for (j = 0; j < dateArray.length; j++) {
        var obj = {
          startDate: dateArray[j],
          endDate: dateArray[j],
          color: 'green'
        }
        data.push(obj)
      }
    }

    $('#calendar').calendar({
      dataSource: data,
      customDayRenderer: function(element, date) {
        if(date.toDateString()  == new Date().toDateString() ) {
          $(element).css('background-color', 'skyblue');
          $(element).css('color', 'white');
          $(element).css('border-radius', '15px');
        }
      }
    });

  } );

